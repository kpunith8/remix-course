{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/ianjones/Code/remix-course/remix-social/app/root.tsx", "/Users/ianjones/Code/remix-course/remix-social/app/routes/index.tsx", "../app/services/db.server.ts", "../app/services/posts.server.ts", "../app/components/Post/Post.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type {MetaFunction} from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react'\nimport styles from './styles/app.css'\n\nexport function links() {\n  return [{rel: 'stylesheet', href: styles}]\n}\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n", "import type {LoaderFunction} from '@remix-run/node'\nimport {json} from '@remix-run/node'\nimport {useLoaderData} from '@remix-run/react'\nimport {getPosts} from '~/services/posts.server'\nimport type {Post} from '~/services/posts.server'\nimport {Post as PostComponent} from '~/components/Post'\n\ntype LoaderData = {\n  posts: Post[]\n}\n\nexport const loader: LoaderFunction = async () => {\n  const data: LoaderData = {posts: await getPosts()}\n  return json(data)\n}\n\nexport default function Index() {\n  const {posts} = useLoaderData<LoaderData>()\n  return (\n    <div>\n      <h1>Welcome to Remix</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.title}>\n            <PostComponent header={post.title}>{post.body}</PostComponent>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n", "import {PrismaClient} from '@prisma/client'\n\nlet db: PrismaClient\n\ndeclare global {\n  var __db: PrismaClient | undefined\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === 'production') {\n  db = new PrismaClient()\n} else {\n  if (!global.__db) {\n    global.__db = new PrismaClient()\n  }\n  db = global.__db\n}\n\nexport {db}\n", "import {db} from '~/services/db.server'\nexport type {Post} from '@prisma/client'\n\nexport const getPosts = () => db.post.findMany()\n", "import type {Props} from './types'\n\nfunction Post({header, children}: Props) {\n  return (\n    <div className=\"flex flex-col p-6 max-w-md border rounded\">\n      {header && <h2 className=\"font-bold text-3xl text-gray-900\">{header}</h2>}\n      <p className=\"mt-4 text-lg text-gray-900\">{children}</p>\n    </div>\n  )\n}\n\nexport default Post\n", "export default {'version':'5b6cd2b2','entry':{'module':'/build/entry.client-5M76FMCG.js','imports':['/build/_shared/chunk-6B35WKWZ.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-X3XVYSNX.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-73JTV2JJ.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-5B6CD2B2.js'};", "\nimport * as entryServer from \"/Users/ianjones/Code/remix-course/remix-social/app/entry.server.tsx\";\nimport * as route0 from \"/Users/ianjones/Code/remix-course/remix-social/app/root.tsx\";\nimport * as route1 from \"/Users/ianjones/Code/remix-course/remix-social/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": []
}
