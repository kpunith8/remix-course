{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "/Users/ianjones/Code/remix-course/remix-social/app/root.tsx", "/Users/ianjones/Code/remix-course/remix-social/app/routes/index.tsx", "../app/services/db.server.ts", "../app/services/posts.server.ts", "../app/components/Post/Post.tsx", "../app/components/PostForm/PostForm.tsx", "../app/services/validations.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type {MetaFunction} from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from '@remix-run/react'\nimport styles from './styles/app.css'\n\nexport function links() {\n  return [{rel: 'stylesheet', href: styles}]\n}\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Remix Social',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n", "import type {ActionFunction, LoaderFunction} from '@remix-run/node'\nimport {redirect, json} from '@remix-run/node'\nimport {useActionData, useLoaderData} from '@remix-run/react'\nimport {createPost, getPosts} from '~/services/posts.server'\nimport {Post as PostComponent} from '~/components/Post'\nimport {PostForm} from '~/components/PostForm'\nimport {CreatePost} from '~/services/validations'\n\ntype LoaderData = {\n  posts: Awaited<ReturnType<typeof getPosts>>\n}\n\ntype ActionData = {\n  error: {\n    formError?: string[]\n    fieldErrors?: {\n      title?: string[]\n      body?: string[]\n    }\n  }\n  fields: {\n    title?: string\n    body?: string\n  }\n}\n\nexport const action: ActionFunction = async ({request}) => {\n  const form = await request.formData()\n  const rawTitle = form.get('title')\n  const rawBody = form.get('body')\n  const result = CreatePost.safeParse({title: rawTitle, body: rawBody})\n\n  if (!result.success) {\n    return json(\n      {\n        error: result.error.flatten(),\n        fields: {\n          title: rawTitle,\n          body: rawBody,\n        },\n      },\n      {status: 400},\n    )\n  }\n\n  await createPost({\n    title: result.data.title ?? null,\n    body: result.data.body,\n    authorId: 'bad-id',\n  })\n\n  return redirect('/')\n}\n\nexport const loader: LoaderFunction = async () => {\n  const data: LoaderData = {posts: await getPosts()}\n  return json(data)\n}\n\nexport default function Index() {\n  const {posts} = useLoaderData<LoaderData>()\n  const formData = useActionData<ActionData>()\n  return (\n    <div className=\"m-8 flex flex-col items-center gap-8\">\n      <h1 className=\"text-xl\">Remix Social</h1>\n      <PostForm\n        action=\"/?index\"\n        error={formData?.error}\n        fields={formData?.fields}\n      />\n      <ul className=\"flex flex-col gap-4\">\n        {posts.map((post) => (\n          <li key={post.body}>\n            <PostComponent\n              header={post?.title}\n              authorName={post?.author?.email}\n            >\n              {post.body}\n            </PostComponent>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n", "import {PrismaClient} from '@prisma/client'\n\nlet db: PrismaClient\n\ndeclare global {\n  var __db: PrismaClient | undefined\n}\n\n// this is needed because in development we don't want to restart\n// the server with every change, but we want to make sure we don't\n// create a new connection to the DB with every change either.\nif (process.env.NODE_ENV === 'production') {\n  db = new PrismaClient()\n} else {\n  if (!global.__db) {\n    global.__db = new PrismaClient()\n  }\n  db = global.__db\n}\n\nexport {db}\n", "import type {Post, Prisma} from '@prisma/client'\nimport {db} from '~/services/db.server'\nexport type {Post}\n\nexport const getPosts = () =>\n  db.post.findMany({include: {author: {select: {email: true, id: true}}}})\n\nexport const createPost = ({\n  title,\n  body,\n  authorId,\n}: Pick<Post, 'title' | 'body' | 'authorId'>) => {\n  return db.post.create({data: {title, body, authorId}})\n}\n", "import type {Props} from './types'\n\nfunction Post({header, authorName, children}: Props) {\n  return (\n    <div className=\"flex flex-col p-6 max-w-md border rounded\">\n      {header && <h2 className=\"font-bold text-3xl text-gray-900\">{header}</h2>}\n      {authorName && <p className=\"text-gray-700 italic\">{authorName}</p>}\n      <p className=\"mt-4 text-lg text-gray-900\">{children}</p>\n    </div>\n  )\n}\n\nexport default Post\n", "import type {Props} from './types'\n\nfunction PostForm({error, fields, method = 'post', ...props}: Props) {\n  return (\n    <form className=\"flex flex-col gap-4\" method={method} {...props}>\n      <div className=\"flex flex-col\">\n        <label htmlFor=\"title\" className=\"mb-2 text-gray-600\">\n          Title\n        </label>\n        <input\n          defaultValue={fields?.title}\n          className=\"p-4\"\n          name=\"title\"\n          placeholder=\"Title of your post\"\n        />\n        {false && error?.fieldErrors?.title && (\n          <p className=\"text-red-500\">{error?.fieldErrors?.title}</p>\n        )}\n      </div>\n      <div className=\"mb-4 flex flex-col\">\n        <label htmlFor=\"body\" className=\"mb-2 text-gray-600\">\n          Body\n        </label>\n        <textarea\n          defaultValue={fields?.body}\n          className=\"p-4\"\n          name=\"body\"\n          placeholder=\"Write something amazing\"\n        />\n        {false && error?.fieldErrors?.body && (\n          <p className=\"text-red-500\">{error?.fieldErrors?.body}</p>\n        )}\n      </div>\n      {error?.formError && <p className=\"text-red-500\">{error.formError}</p>}\n      <button\n        type=\"submit\"\n        className=\"transition rounded text-blue-700 font-bold py-4 px-6 transparent hover:bg-gray-100\"\n      >\n        Create Post\n      </button>\n    </form>\n  )\n}\n\nexport default PostForm\n", "import {z} from 'zod'\n\nexport const CreatePost = z.object({\n  title: z.string().optional(),\n  body: z.string().min(1),\n})\n", "export default {'version':'40cbc18b','entry':{'module':'/build/entry.client-XYJJ47RS.js','imports':['/build/_shared/chunk-FDW5AU55.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-4Y4JMKFD.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-GRBBTGEH.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-40CBC18B.js'};", "\nimport * as entryServer from \"/Users/ianjones/Code/remix-course/remix-social/app/entry.server.tsx\";\nimport * as route0 from \"/Users/ianjones/Code/remix-course/remix-social/app/root.tsx\";\nimport * as route1 from \"/Users/ianjones/Code/remix-course/remix-social/app/routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": []
}
